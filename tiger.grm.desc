
state 0:

	program : . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 8
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1
	program	goto 104

	.	error


state 1:

	exp : assign .  (reduce by rule 12)



	.	reduce by rule 12


state 2:

	exp : bin_op .  (reduce by rule 8)



	.	reduce by rule 8


state 3:

	exp : funcall .  (reduce by rule 11)



	.	reduce by rule 11


state 4:

	exp : if' .  (reduce by rule 7)



	.	reduce by rule 7


state 5:

	exp : let' .  (reduce by rule 6)



	.	reduce by rule 6


state 6:

	exp : rec_exp .  (reduce by rule 10)



	.	reduce by rule 10


state 7:

	exp : arr_exp .  (reduce by rule 9)



	.	reduce by rule 9


state 8:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	program : exp .  (reduce by rule 0)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 0


state 9:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 10:

	let' : LET . decs IN seq END 

	FUNCTION	shift 27
	VAR	shift 26
	TYPE	shift 25

	decs	goto 24
	dec	goto 23
	type_dec	goto 22
	var_dec	goto 21
	fun_dec	goto 20

	.	error


state 11:

	if' : IF . exp THEN exp ELSE exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 28
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 12:

	exp : LPAREN . seq RPAREN 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 30
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 29
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 13:

	exp : STRING .  (reduce by rule 3)



	.	reduce by rule 3


state 14:

	exp : INT .  (reduce by rule 2)



	.	reduce by rule 2


state 15:

	exp : ID .  (reduce by rule 4)
	arr_exp : ID . LBRACK exp RBRACK OF exp 
	rec_exp : ID . LBRACE field_exps RBRACE 
	funcall : ID . LPAREN params RPAREN 
	assign : ID . ASSIGN exp 
	assign : ID . DOT ID ASSIGN exp 

	LPAREN	shift 35
	LBRACK	shift 34
	LBRACE	shift 33
	DOT	shift 32
	ASSIGN	shift 31


	.	reduce by rule 4


state 16:

	bin_op : exp EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 36
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 17:

	bin_op : exp TIMES . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 37
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 18:

	bin_op : exp MINUS . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 38
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 19:

	bin_op : exp PLUS . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 39
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 20:

	dec : fun_dec .  (reduce by rule 35)



	.	reduce by rule 35


state 21:

	dec : var_dec .  (reduce by rule 34)



	.	reduce by rule 34


state 22:

	dec : type_dec .  (reduce by rule 33)



	.	reduce by rule 33


state 23:

	decs : dec . decs 
	decs : dec .  (reduce by rule 32)

	FUNCTION	shift 27
	VAR	shift 26
	TYPE	shift 25

	decs	goto 40
	dec	goto 23
	type_dec	goto 22
	var_dec	goto 21
	fun_dec	goto 20

	.	reduce by rule 32


state 24:

	let' : LET decs . IN seq END 

	IN	shift 41


	.	error


state 25:

	type_dec : TYPE . ID EQ ID 
	type_dec : TYPE . ID EQ ARRAY OF ID 
	type_dec : TYPE . ID EQ LBRACE field_decs RBRACE 

	ID	shift 42


	.	error


state 26:

	var_dec : VAR . ID COLON ID ASSIGN exp 
	var_dec : VAR . ID ASSIGN exp 

	ID	shift 43


	.	error


state 27:

	fun_dec : FUNCTION . ID LPAREN field_decs RPAREN EQ exp 
	fun_dec : FUNCTION . ID LPAREN field_decs RPAREN COLON ID EQ exp 

	ID	shift 44


	.	error


state 28:

	if' : IF exp . THEN exp ELSE exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16
	THEN	shift 45


	.	error


state 29:

	exp : LPAREN seq . RPAREN 

	RPAREN	shift 46


	.	error


state 30:

	seq : exp . SEMICOLON seq 
	seq : exp .  (reduce by rule 30)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	SEMICOLON	shift 47
	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 30


state 31:

	assign : ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 48
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 32:

	assign : ID DOT . ID ASSIGN exp 

	ID	shift 49


	.	error


state 33:

	rec_exp : ID LBRACE . field_exps RBRACE 

	ID	shift 52

	field_exps	goto 51
	field_exp	goto 50

	.	error


state 34:

	arr_exp : ID LBRACK . exp RBRACK OF exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 53
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 35:

	funcall : ID LPAREN . params RPAREN 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 55
	arr_exp	goto 7
	rec_exp	goto 6
	params	goto 54
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 36:

	bin_op : exp . EQ exp 
	bin_op : exp EQ exp .  (reduce by rule 25)
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	EOF	reduce by rule 25
	COMMA	reduce by rule 25
	SEMICOLON	reduce by rule 25
	RPAREN	reduce by rule 25
	RBRACK	reduce by rule 25
	RBRACE	reduce by rule 25
	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	THEN	reduce by rule 25
	ELSE	reduce by rule 25
	IN	reduce by rule 25
	END	reduce by rule 25
	FUNCTION	reduce by rule 25
	VAR	reduce by rule 25
	TYPE	reduce by rule 25


	.	error


state 37:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp TIMES exp .  (reduce by rule 28)



	.	reduce by rule 28


state 38:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp MINUS exp .  (reduce by rule 26)
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	TIMES	shift 17


	.	reduce by rule 26


state 39:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp PLUS exp .  (reduce by rule 27)
	bin_op : exp . TIMES exp 

	TIMES	shift 17


	.	reduce by rule 27


state 40:

	decs : dec decs .  (reduce by rule 31)



	.	reduce by rule 31


state 41:

	let' : LET decs IN . seq END 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 30
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 56
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 42:

	type_dec : TYPE ID . EQ ID 
	type_dec : TYPE ID . EQ ARRAY OF ID 
	type_dec : TYPE ID . EQ LBRACE field_decs RBRACE 

	EQ	shift 57


	.	error


state 43:

	var_dec : VAR ID . COLON ID ASSIGN exp 
	var_dec : VAR ID . ASSIGN exp 

	COLON	shift 59
	ASSIGN	shift 58


	.	error


state 44:

	fun_dec : FUNCTION ID . LPAREN field_decs RPAREN EQ exp 
	fun_dec : FUNCTION ID . LPAREN field_decs RPAREN COLON ID EQ exp 

	LPAREN	shift 60


	.	error


state 45:

	if' : IF exp THEN . exp ELSE exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 61
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 46:

	exp : LPAREN seq RPAREN .  (reduce by rule 5)



	.	reduce by rule 5


state 47:

	seq : exp SEMICOLON . seq 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 30
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 62
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 48:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	assign : ID ASSIGN exp .  (reduce by rule 13)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 13


state 49:

	assign : ID DOT ID . ASSIGN exp 

	ASSIGN	shift 63


	.	error


state 50:

	field_exps : field_exp . COMMA field_exps 
	field_exps : field_exp .  (reduce by rule 18)

	COMMA	shift 64


	.	reduce by rule 18


state 51:

	rec_exp : ID LBRACE field_exps . RBRACE 

	RBRACE	shift 65


	.	error


state 52:

	field_exp : ID . EQ exp 

	EQ	shift 66


	.	error


state 53:

	arr_exp : ID LBRACK exp . RBRACK OF exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	RBRACK	shift 67
	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	error


state 54:

	funcall : ID LPAREN params . RPAREN 

	RPAREN	shift 68


	.	error


state 55:

	params : exp . COMMA params 
	params : exp .  (reduce by rule 22)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	COMMA	shift 69
	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 22


state 56:

	let' : LET decs IN seq . END 

	END	shift 70


	.	error


state 57:

	type_dec : TYPE ID EQ . ID 
	type_dec : TYPE ID EQ . ARRAY OF ID 
	type_dec : TYPE ID EQ . LBRACE field_decs RBRACE 

	ID	shift 73
	LBRACE	shift 72
	ARRAY	shift 71


	.	error


state 58:

	var_dec : VAR ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 74
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 59:

	var_dec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 75


	.	error


state 60:

	fun_dec : FUNCTION ID LPAREN . field_decs RPAREN EQ exp 
	fun_dec : FUNCTION ID LPAREN . field_decs RPAREN COLON ID EQ exp 

	ID	shift 78

	field_decs	goto 77
	field_dec	goto 76

	.	error


state 61:

	if' : IF exp THEN exp . ELSE exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16
	ELSE	shift 79


	.	error


state 62:

	seq : exp SEMICOLON seq .  (reduce by rule 29)



	.	reduce by rule 29


state 63:

	assign : ID DOT ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 80
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 64:

	field_exps : field_exp COMMA . field_exps 

	ID	shift 52

	field_exps	goto 81
	field_exp	goto 50

	.	error


state 65:

	rec_exp : ID LBRACE field_exps RBRACE .  (reduce by rule 16)



	.	reduce by rule 16


state 66:

	field_exp : ID EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 82
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 67:

	arr_exp : ID LBRACK exp RBRACK . OF exp 

	OF	shift 83


	.	error


state 68:

	funcall : ID LPAREN params RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 69:

	params : exp COMMA . params 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 55
	arr_exp	goto 7
	rec_exp	goto 6
	params	goto 84
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 70:

	let' : LET decs IN seq END .  (reduce by rule 23)



	.	reduce by rule 23


state 71:

	type_dec : TYPE ID EQ ARRAY . OF ID 

	OF	shift 85


	.	error


state 72:

	type_dec : TYPE ID EQ LBRACE . field_decs RBRACE 

	ID	shift 78

	field_decs	goto 86
	field_dec	goto 76

	.	error


state 73:

	type_dec : TYPE ID EQ ID .  (reduce by rule 38)



	.	reduce by rule 38


state 74:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	var_dec : VAR ID ASSIGN exp .  (reduce by rule 37)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 37


state 75:

	var_dec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 87


	.	error


state 76:

	field_decs : field_dec . COMMA field_decs 
	field_decs : field_dec .  (reduce by rule 42)

	COMMA	shift 88


	.	reduce by rule 42


state 77:

	fun_dec : FUNCTION ID LPAREN field_decs . RPAREN EQ exp 
	fun_dec : FUNCTION ID LPAREN field_decs . RPAREN COLON ID EQ exp 

	RPAREN	shift 89


	.	error


state 78:

	field_dec : ID . COLON ID 

	COLON	shift 90


	.	error


state 79:

	if' : IF exp THEN exp ELSE . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 91
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 80:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	assign : ID DOT ID ASSIGN exp .  (reduce by rule 14)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 14


state 81:

	field_exps : field_exp COMMA field_exps .  (reduce by rule 17)



	.	reduce by rule 17


state 82:

	field_exp : ID EQ exp .  (reduce by rule 19)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 19


state 83:

	arr_exp : ID LBRACK exp RBRACK OF . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 92
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 84:

	params : exp COMMA params .  (reduce by rule 21)



	.	reduce by rule 21


state 85:

	type_dec : TYPE ID EQ ARRAY OF . ID 

	ID	shift 93


	.	error


state 86:

	type_dec : TYPE ID EQ LBRACE field_decs . RBRACE 

	RBRACE	shift 94


	.	error


state 87:

	var_dec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 95
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 88:

	field_decs : field_dec COMMA . field_decs 

	ID	shift 78

	field_decs	goto 96
	field_dec	goto 76

	.	error


state 89:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN . EQ exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN . COLON ID EQ exp 

	COLON	shift 98
	EQ	shift 97


	.	error


state 90:

	field_dec : ID COLON . ID 

	ID	shift 99


	.	error


state 91:

	if' : IF exp THEN exp ELSE exp .  (reduce by rule 24)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 24


state 92:

	arr_exp : ID LBRACK exp RBRACK OF exp .  (reduce by rule 15)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 15


state 93:

	type_dec : TYPE ID EQ ARRAY OF ID .  (reduce by rule 39)



	.	reduce by rule 39


state 94:

	type_dec : TYPE ID EQ LBRACE field_decs RBRACE .  (reduce by rule 40)



	.	reduce by rule 40


state 95:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	var_dec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 36)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 36


state 96:

	field_decs : field_dec COMMA field_decs .  (reduce by rule 41)



	.	reduce by rule 41


state 97:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 100
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 98:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON . ID EQ exp 

	ID	shift 101


	.	error


state 99:

	field_dec : ID COLON ID .  (reduce by rule 43)



	.	reduce by rule 43


state 100:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ exp .  (reduce by rule 44)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 44


state 101:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID . EQ exp 

	EQ	shift 102


	.	error


state 102:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 103
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 103:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ exp .  (reduce by rule 45)

	PLUS	shift 19
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 45


state 104:


	EOF	accept


	.	error

137 of 392 action table entries left after compaction
202 goto table entries
