
state 0:

	program : . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 8
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1
	program	goto 106

	.	error


state 1:

	exp : assign .  (reduce by rule 12)



	.	reduce by rule 12


state 2:

	exp : bin_op .  (reduce by rule 8)



	.	reduce by rule 8


state 3:

	exp : funcall .  (reduce by rule 11)



	.	reduce by rule 11


state 4:

	exp : if' .  (reduce by rule 7)



	.	reduce by rule 7


state 5:

	exp : let' .  (reduce by rule 6)



	.	reduce by rule 6


state 6:

	exp : rec_exp .  (reduce by rule 10)



	.	reduce by rule 10


state 7:

	exp : arr_exp .  (reduce by rule 9)



	.	reduce by rule 9


state 8:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	program : exp .  (reduce by rule 0)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 0


state 9:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 10:

	let' : LET . decs IN seq END 

	FUNCTION	shift 28
	VAR	shift 27
	TYPE	shift 26

	decs	goto 25
	dec	goto 24
	type_dec	goto 23
	var_dec	goto 22
	fun_dec	goto 21

	.	error


state 11:

	if' : IF . exp THEN exp ELSE exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 29
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 12:

	exp : LPAREN . seq RPAREN 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 31
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 30
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 13:

	exp : STRING .  (reduce by rule 3)



	.	reduce by rule 3


state 14:

	exp : INT .  (reduce by rule 2)



	.	reduce by rule 2


state 15:

	exp : ID .  (reduce by rule 4)
	arr_exp : ID . LBRACK exp RBRACK OF exp 
	rec_exp : ID . LBRACE field_exps RBRACE 
	funcall : ID . LPAREN params RPAREN 
	assign : ID . ASSIGN exp 
	assign : ID . DOT ID ASSIGN exp 

	LPAREN	shift 36
	LBRACK	shift 35
	LBRACE	shift 34
	DOT	shift 33
	ASSIGN	shift 32


	.	reduce by rule 4


state 16:

	bin_op : exp GT . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 37
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 17:

	bin_op : exp EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 38
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 18:

	bin_op : exp TIMES . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 39
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 19:

	bin_op : exp MINUS . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 40
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 20:

	bin_op : exp PLUS . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 41
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 21:

	dec : fun_dec .  (reduce by rule 36)



	.	reduce by rule 36


state 22:

	dec : var_dec .  (reduce by rule 35)



	.	reduce by rule 35


state 23:

	dec : type_dec .  (reduce by rule 34)



	.	reduce by rule 34


state 24:

	decs : dec . decs 
	decs : dec .  (reduce by rule 33)

	FUNCTION	shift 28
	VAR	shift 27
	TYPE	shift 26

	decs	goto 42
	dec	goto 24
	type_dec	goto 23
	var_dec	goto 22
	fun_dec	goto 21

	.	reduce by rule 33


state 25:

	let' : LET decs . IN seq END 

	IN	shift 43


	.	error


state 26:

	type_dec : TYPE . ID EQ ID 
	type_dec : TYPE . ID EQ ARRAY OF ID 
	type_dec : TYPE . ID EQ LBRACE field_decs RBRACE 

	ID	shift 44


	.	error


state 27:

	var_dec : VAR . ID COLON ID ASSIGN exp 
	var_dec : VAR . ID ASSIGN exp 

	ID	shift 45


	.	error


state 28:

	fun_dec : FUNCTION . ID LPAREN field_decs RPAREN EQ exp 
	fun_dec : FUNCTION . ID LPAREN field_decs RPAREN COLON ID EQ exp 

	ID	shift 46


	.	error


state 29:

	if' : IF exp . THEN exp ELSE exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16
	THEN	shift 47


	.	error


state 30:

	exp : LPAREN seq . RPAREN 

	RPAREN	shift 48


	.	error


state 31:

	seq : exp . SEMICOLON seq 
	seq : exp .  (reduce by rule 31)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	SEMICOLON	shift 49
	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 31


state 32:

	assign : ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 50
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 33:

	assign : ID DOT . ID ASSIGN exp 

	ID	shift 51


	.	error


state 34:

	rec_exp : ID LBRACE . field_exps RBRACE 

	ID	shift 54

	field_exps	goto 53
	field_exp	goto 52

	.	error


state 35:

	arr_exp : ID LBRACK . exp RBRACK OF exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 55
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 36:

	funcall : ID LPAREN . params RPAREN 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 57
	arr_exp	goto 7
	rec_exp	goto 6
	params	goto 56
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 37:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	bin_op : exp GT exp .  (reduce by rule 29)

	EOF	reduce by rule 29
	COMMA	reduce by rule 29
	SEMICOLON	reduce by rule 29
	RPAREN	reduce by rule 29
	RBRACK	reduce by rule 29
	RBRACE	reduce by rule 29
	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	THEN	reduce by rule 29
	ELSE	reduce by rule 29
	IN	reduce by rule 29
	END	reduce by rule 29
	FUNCTION	reduce by rule 29
	VAR	reduce by rule 29
	TYPE	reduce by rule 29


	.	error


state 38:

	bin_op : exp . EQ exp 
	bin_op : exp EQ exp .  (reduce by rule 25)
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	EOF	reduce by rule 25
	COMMA	reduce by rule 25
	SEMICOLON	reduce by rule 25
	RPAREN	reduce by rule 25
	RBRACK	reduce by rule 25
	RBRACE	reduce by rule 25
	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	THEN	reduce by rule 25
	ELSE	reduce by rule 25
	IN	reduce by rule 25
	END	reduce by rule 25
	FUNCTION	reduce by rule 25
	VAR	reduce by rule 25
	TYPE	reduce by rule 25


	.	error


state 39:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp TIMES exp .  (reduce by rule 28)
	bin_op : exp . GT exp 



	.	reduce by rule 28


state 40:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp MINUS exp .  (reduce by rule 26)
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	TIMES	shift 18


	.	reduce by rule 26


state 41:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp PLUS exp .  (reduce by rule 27)
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	TIMES	shift 18


	.	reduce by rule 27


state 42:

	decs : dec decs .  (reduce by rule 32)



	.	reduce by rule 32


state 43:

	let' : LET decs IN . seq END 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 31
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 58
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 44:

	type_dec : TYPE ID . EQ ID 
	type_dec : TYPE ID . EQ ARRAY OF ID 
	type_dec : TYPE ID . EQ LBRACE field_decs RBRACE 

	EQ	shift 59


	.	error


state 45:

	var_dec : VAR ID . COLON ID ASSIGN exp 
	var_dec : VAR ID . ASSIGN exp 

	COLON	shift 61
	ASSIGN	shift 60


	.	error


state 46:

	fun_dec : FUNCTION ID . LPAREN field_decs RPAREN EQ exp 
	fun_dec : FUNCTION ID . LPAREN field_decs RPAREN COLON ID EQ exp 

	LPAREN	shift 62


	.	error


state 47:

	if' : IF exp THEN . exp ELSE exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 63
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 48:

	exp : LPAREN seq RPAREN .  (reduce by rule 5)



	.	reduce by rule 5


state 49:

	seq : exp SEMICOLON . seq 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 31
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 64
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 50:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	assign : ID ASSIGN exp .  (reduce by rule 13)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 13


state 51:

	assign : ID DOT ID . ASSIGN exp 

	ASSIGN	shift 65


	.	error


state 52:

	field_exps : field_exp . COMMA field_exps 
	field_exps : field_exp .  (reduce by rule 18)

	COMMA	shift 66


	.	reduce by rule 18


state 53:

	rec_exp : ID LBRACE field_exps . RBRACE 

	RBRACE	shift 67


	.	error


state 54:

	field_exp : ID . EQ exp 

	EQ	shift 68


	.	error


state 55:

	arr_exp : ID LBRACK exp . RBRACK OF exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	RBRACK	shift 69
	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	error


state 56:

	funcall : ID LPAREN params . RPAREN 

	RPAREN	shift 70


	.	error


state 57:

	params : exp . COMMA params 
	params : exp .  (reduce by rule 22)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	COMMA	shift 71
	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 22


state 58:

	let' : LET decs IN seq . END 

	END	shift 72


	.	error


state 59:

	type_dec : TYPE ID EQ . ID 
	type_dec : TYPE ID EQ . ARRAY OF ID 
	type_dec : TYPE ID EQ . LBRACE field_decs RBRACE 

	ID	shift 75
	LBRACE	shift 74
	ARRAY	shift 73


	.	error


state 60:

	var_dec : VAR ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 76
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 61:

	var_dec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 77


	.	error


state 62:

	fun_dec : FUNCTION ID LPAREN . field_decs RPAREN EQ exp 
	fun_dec : FUNCTION ID LPAREN . field_decs RPAREN COLON ID EQ exp 

	ID	shift 80

	field_decs	goto 79
	field_dec	goto 78

	.	error


state 63:

	if' : IF exp THEN exp . ELSE exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16
	ELSE	shift 81


	.	error


state 64:

	seq : exp SEMICOLON seq .  (reduce by rule 30)



	.	reduce by rule 30


state 65:

	assign : ID DOT ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 82
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 66:

	field_exps : field_exp COMMA . field_exps 

	ID	shift 54

	field_exps	goto 83
	field_exp	goto 52

	.	error


state 67:

	rec_exp : ID LBRACE field_exps RBRACE .  (reduce by rule 16)



	.	reduce by rule 16


state 68:

	field_exp : ID EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 84
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 69:

	arr_exp : ID LBRACK exp RBRACK . OF exp 

	OF	shift 85


	.	error


state 70:

	funcall : ID LPAREN params RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 71:

	params : exp COMMA . params 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 57
	arr_exp	goto 7
	rec_exp	goto 6
	params	goto 86
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 72:

	let' : LET decs IN seq END .  (reduce by rule 23)



	.	reduce by rule 23


state 73:

	type_dec : TYPE ID EQ ARRAY . OF ID 

	OF	shift 87


	.	error


state 74:

	type_dec : TYPE ID EQ LBRACE . field_decs RBRACE 

	ID	shift 80

	field_decs	goto 88
	field_dec	goto 78

	.	error


state 75:

	type_dec : TYPE ID EQ ID .  (reduce by rule 39)



	.	reduce by rule 39


state 76:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	var_dec : VAR ID ASSIGN exp .  (reduce by rule 38)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 38


state 77:

	var_dec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 89


	.	error


state 78:

	field_decs : field_dec . COMMA field_decs 
	field_decs : field_dec .  (reduce by rule 43)

	COMMA	shift 90


	.	reduce by rule 43


state 79:

	fun_dec : FUNCTION ID LPAREN field_decs . RPAREN EQ exp 
	fun_dec : FUNCTION ID LPAREN field_decs . RPAREN COLON ID EQ exp 

	RPAREN	shift 91


	.	error


state 80:

	field_dec : ID . COLON ID 

	COLON	shift 92


	.	error


state 81:

	if' : IF exp THEN exp ELSE . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 93
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 82:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	assign : ID DOT ID ASSIGN exp .  (reduce by rule 14)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 14


state 83:

	field_exps : field_exp COMMA field_exps .  (reduce by rule 17)



	.	reduce by rule 17


state 84:

	field_exp : ID EQ exp .  (reduce by rule 19)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 19


state 85:

	arr_exp : ID LBRACK exp RBRACK OF . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 94
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 86:

	params : exp COMMA params .  (reduce by rule 21)



	.	reduce by rule 21


state 87:

	type_dec : TYPE ID EQ ARRAY OF . ID 

	ID	shift 95


	.	error


state 88:

	type_dec : TYPE ID EQ LBRACE field_decs . RBRACE 

	RBRACE	shift 96


	.	error


state 89:

	var_dec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 97
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 90:

	field_decs : field_dec COMMA . field_decs 

	ID	shift 80

	field_decs	goto 98
	field_dec	goto 78

	.	error


state 91:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN . EQ exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN . COLON ID EQ exp 

	COLON	shift 100
	EQ	shift 99


	.	error


state 92:

	field_dec : ID COLON . ID 

	ID	shift 101


	.	error


state 93:

	if' : IF exp THEN exp ELSE exp .  (reduce by rule 24)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 24


state 94:

	arr_exp : ID LBRACK exp RBRACK OF exp .  (reduce by rule 15)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 15


state 95:

	type_dec : TYPE ID EQ ARRAY OF ID .  (reduce by rule 40)



	.	reduce by rule 40


state 96:

	type_dec : TYPE ID EQ LBRACE field_decs RBRACE .  (reduce by rule 41)



	.	reduce by rule 41


state 97:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	var_dec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 37)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 37


state 98:

	field_decs : field_dec COMMA field_decs .  (reduce by rule 42)



	.	reduce by rule 42


state 99:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 102
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 100:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON . ID EQ exp 

	ID	shift 103


	.	error


state 101:

	field_dec : ID COLON ID .  (reduce by rule 44)



	.	reduce by rule 44


state 102:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ exp .  (reduce by rule 45)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 45


state 103:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID . EQ exp 

	EQ	shift 104


	.	error


state 104:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 105
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 105:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . PLUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp . GT exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ exp .  (reduce by rule 46)

	PLUS	shift 20
	MINUS	shift 19
	TIMES	shift 18
	EQ	shift 17
	GT	shift 16


	.	reduce by rule 46


state 106:


	EOF	accept


	.	error

168 of 432 action table entries left after compaction
210 goto table entries
