
state 0:

	program : . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 8
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1
	program	goto 99

	.	error


state 1:

	exp : assign .  (reduce by rule 12)



	.	reduce by rule 12


state 2:

	exp : bin_op .  (reduce by rule 8)



	.	reduce by rule 8


state 3:

	exp : funcall .  (reduce by rule 11)



	.	reduce by rule 11


state 4:

	exp : if' .  (reduce by rule 7)



	.	reduce by rule 7


state 5:

	exp : let' .  (reduce by rule 6)



	.	reduce by rule 6


state 6:

	exp : rec_exp .  (reduce by rule 10)



	.	reduce by rule 10


state 7:

	exp : arr_exp .  (reduce by rule 9)



	.	reduce by rule 9


state 8:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	program : exp .  (reduce by rule 0)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 0


state 9:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 10:

	let' : LET . decs IN seq END 

	FUNCTION	shift 26
	VAR	shift 25
	TYPE	shift 24

	decs	goto 23
	dec	goto 22
	type_dec	goto 21
	var_dec	goto 20
	fun_dec	goto 19

	.	error


state 11:

	if' : IF . exp THEN exp ELSE exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 27
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 12:

	exp : LPAREN . seq RPAREN 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 29
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 28
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 13:

	exp : STRING .  (reduce by rule 3)



	.	reduce by rule 3


state 14:

	exp : INT .  (reduce by rule 2)



	.	reduce by rule 2


state 15:

	exp : ID .  (reduce by rule 4)
	arr_exp : ID . LBRACK exp RBRACK OF exp 
	rec_exp : ID . LBRACE field_exps RBRACE 
	funcall : ID . LPAREN seq RPAREN 
	assign : ID . ASSIGN exp 
	assign : ID . DOT ID ASSIGN exp 

	LPAREN	shift 34
	LBRACK	shift 33
	LBRACE	shift 32
	DOT	shift 31
	ASSIGN	shift 30


	.	reduce by rule 4


state 16:

	bin_op : exp EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 35
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 17:

	bin_op : exp TIMES . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 36
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 18:

	bin_op : exp MINUS . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 37
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 19:

	dec : fun_dec .  (reduce by rule 32)



	.	reduce by rule 32


state 20:

	dec : var_dec .  (reduce by rule 31)



	.	reduce by rule 31


state 21:

	dec : type_dec .  (reduce by rule 30)



	.	reduce by rule 30


state 22:

	decs : dec . decs 
	decs : dec .  (reduce by rule 29)

	FUNCTION	shift 26
	VAR	shift 25
	TYPE	shift 24

	decs	goto 38
	dec	goto 22
	type_dec	goto 21
	var_dec	goto 20
	fun_dec	goto 19

	.	reduce by rule 29


state 23:

	let' : LET decs . IN seq END 

	IN	shift 39


	.	error


state 24:

	type_dec : TYPE . ID EQ ID 
	type_dec : TYPE . ID EQ ARRAY OF ID 
	type_dec : TYPE . ID EQ LBRACE field_decs RBRACE 

	ID	shift 40


	.	error


state 25:

	var_dec : VAR . ID COLON ID ASSIGN exp 
	var_dec : VAR . ID ASSIGN exp 

	ID	shift 41


	.	error


state 26:

	fun_dec : FUNCTION . ID LPAREN field_decs RPAREN EQ exp 
	fun_dec : FUNCTION . ID LPAREN field_decs RPAREN COLON ID EQ exp 

	ID	shift 42


	.	error


state 27:

	if' : IF exp . THEN exp ELSE exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16
	THEN	shift 43


	.	error


state 28:

	exp : LPAREN seq . RPAREN 

	RPAREN	shift 44


	.	error


state 29:

	seq : exp . SEMICOLON seq 
	seq : exp .  (reduce by rule 27)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	SEMICOLON	shift 45
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 27


state 30:

	assign : ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 46
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 31:

	assign : ID DOT . ID ASSIGN exp 

	ID	shift 47


	.	error


state 32:

	rec_exp : ID LBRACE . field_exps RBRACE 

	ID	shift 50

	field_exps	goto 49
	field_exp	goto 48

	.	error


state 33:

	arr_exp : ID LBRACK . exp RBRACK OF exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 51
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 34:

	funcall : ID LPAREN . seq RPAREN 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 29
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 52
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 35:

	bin_op : exp . EQ exp 
	bin_op : exp EQ exp .  (reduce by rule 23)
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	EOF	reduce by rule 23
	COMMA	reduce by rule 23
	SEMICOLON	reduce by rule 23
	RPAREN	reduce by rule 23
	RBRACK	reduce by rule 23
	RBRACE	reduce by rule 23
	MINUS	shift 18
	TIMES	shift 17
	THEN	reduce by rule 23
	ELSE	reduce by rule 23
	IN	reduce by rule 23
	END	reduce by rule 23
	FUNCTION	reduce by rule 23
	VAR	reduce by rule 23
	TYPE	reduce by rule 23


	.	error


state 36:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	bin_op : exp TIMES exp .  (reduce by rule 25)



	.	reduce by rule 25


state 37:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp MINUS exp .  (reduce by rule 24)
	bin_op : exp . TIMES exp 

	TIMES	shift 17


	.	reduce by rule 24


state 38:

	decs : dec decs .  (reduce by rule 28)



	.	reduce by rule 28


state 39:

	let' : LET decs IN . seq END 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 29
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 53
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 40:

	type_dec : TYPE ID . EQ ID 
	type_dec : TYPE ID . EQ ARRAY OF ID 
	type_dec : TYPE ID . EQ LBRACE field_decs RBRACE 

	EQ	shift 54


	.	error


state 41:

	var_dec : VAR ID . COLON ID ASSIGN exp 
	var_dec : VAR ID . ASSIGN exp 

	COLON	shift 56
	ASSIGN	shift 55


	.	error


state 42:

	fun_dec : FUNCTION ID . LPAREN field_decs RPAREN EQ exp 
	fun_dec : FUNCTION ID . LPAREN field_decs RPAREN COLON ID EQ exp 

	LPAREN	shift 57


	.	error


state 43:

	if' : IF exp THEN . exp ELSE exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 58
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 44:

	exp : LPAREN seq RPAREN .  (reduce by rule 5)



	.	reduce by rule 5


state 45:

	seq : exp SEMICOLON . seq 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 29
	arr_exp	goto 7
	rec_exp	goto 6
	seq	goto 59
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 46:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	assign : ID ASSIGN exp .  (reduce by rule 13)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 13


state 47:

	assign : ID DOT ID . ASSIGN exp 

	ASSIGN	shift 60


	.	error


state 48:

	field_exps : field_exp . COMMA field_exps 
	field_exps : field_exp .  (reduce by rule 18)

	COMMA	shift 61


	.	reduce by rule 18


state 49:

	rec_exp : ID LBRACE field_exps . RBRACE 

	RBRACE	shift 62


	.	error


state 50:

	field_exp : ID . EQ exp 

	EQ	shift 63


	.	error


state 51:

	arr_exp : ID LBRACK exp . RBRACK OF exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	RBRACK	shift 64
	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	error


state 52:

	funcall : ID LPAREN seq . RPAREN 

	RPAREN	shift 65


	.	error


state 53:

	let' : LET decs IN seq . END 

	END	shift 66


	.	error


state 54:

	type_dec : TYPE ID EQ . ID 
	type_dec : TYPE ID EQ . ARRAY OF ID 
	type_dec : TYPE ID EQ . LBRACE field_decs RBRACE 

	ID	shift 69
	LBRACE	shift 68
	ARRAY	shift 67


	.	error


state 55:

	var_dec : VAR ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 70
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 56:

	var_dec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 71


	.	error


state 57:

	fun_dec : FUNCTION ID LPAREN . field_decs RPAREN EQ exp 
	fun_dec : FUNCTION ID LPAREN . field_decs RPAREN COLON ID EQ exp 

	ID	shift 74

	field_decs	goto 73
	field_dec	goto 72

	.	error


state 58:

	if' : IF exp THEN exp . ELSE exp 
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16
	ELSE	shift 75


	.	error


state 59:

	seq : exp SEMICOLON seq .  (reduce by rule 26)



	.	reduce by rule 26


state 60:

	assign : ID DOT ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 76
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 61:

	field_exps : field_exp COMMA . field_exps 

	ID	shift 50

	field_exps	goto 77
	field_exp	goto 48

	.	error


state 62:

	rec_exp : ID LBRACE field_exps RBRACE .  (reduce by rule 16)



	.	reduce by rule 16


state 63:

	field_exp : ID EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 78
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 64:

	arr_exp : ID LBRACK exp RBRACK . OF exp 

	OF	shift 79


	.	error


state 65:

	funcall : ID LPAREN seq RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 66:

	let' : LET decs IN seq END .  (reduce by rule 21)



	.	reduce by rule 21


state 67:

	type_dec : TYPE ID EQ ARRAY . OF ID 

	OF	shift 80


	.	error


state 68:

	type_dec : TYPE ID EQ LBRACE . field_decs RBRACE 

	ID	shift 74

	field_decs	goto 81
	field_dec	goto 72

	.	error


state 69:

	type_dec : TYPE ID EQ ID .  (reduce by rule 35)



	.	reduce by rule 35


state 70:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	var_dec : VAR ID ASSIGN exp .  (reduce by rule 34)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 34


state 71:

	var_dec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 82


	.	error


state 72:

	field_decs : field_dec . COMMA field_decs 
	field_decs : field_dec .  (reduce by rule 39)

	COMMA	shift 83


	.	reduce by rule 39


state 73:

	fun_dec : FUNCTION ID LPAREN field_decs . RPAREN EQ exp 
	fun_dec : FUNCTION ID LPAREN field_decs . RPAREN COLON ID EQ exp 

	RPAREN	shift 84


	.	error


state 74:

	field_dec : ID . COLON ID 

	COLON	shift 85


	.	error


state 75:

	if' : IF exp THEN exp ELSE . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 86
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 76:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	assign : ID DOT ID ASSIGN exp .  (reduce by rule 14)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 14


state 77:

	field_exps : field_exp COMMA field_exps .  (reduce by rule 17)



	.	reduce by rule 17


state 78:

	field_exp : ID EQ exp .  (reduce by rule 19)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 19


state 79:

	arr_exp : ID LBRACK exp RBRACK OF . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 87
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 80:

	type_dec : TYPE ID EQ ARRAY OF . ID 

	ID	shift 88


	.	error


state 81:

	type_dec : TYPE ID EQ LBRACE field_decs . RBRACE 

	RBRACE	shift 89


	.	error


state 82:

	var_dec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 90
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 83:

	field_decs : field_dec COMMA . field_decs 

	ID	shift 74

	field_decs	goto 91
	field_dec	goto 72

	.	error


state 84:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN . EQ exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN . COLON ID EQ exp 

	COLON	shift 93
	EQ	shift 92


	.	error


state 85:

	field_dec : ID COLON . ID 

	ID	shift 94


	.	error


state 86:

	if' : IF exp THEN exp ELSE exp .  (reduce by rule 22)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 22


state 87:

	arr_exp : ID LBRACK exp RBRACK OF exp .  (reduce by rule 15)
	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 15


state 88:

	type_dec : TYPE ID EQ ARRAY OF ID .  (reduce by rule 36)



	.	reduce by rule 36


state 89:

	type_dec : TYPE ID EQ LBRACE field_decs RBRACE .  (reduce by rule 37)



	.	reduce by rule 37


state 90:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	var_dec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 33)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 33


state 91:

	field_decs : field_dec COMMA field_decs .  (reduce by rule 38)



	.	reduce by rule 38


state 92:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 95
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 93:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON . ID EQ exp 

	ID	shift 96


	.	error


state 94:

	field_dec : ID COLON ID .  (reduce by rule 40)



	.	reduce by rule 40


state 95:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ exp .  (reduce by rule 41)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 41


state 96:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID . EQ exp 

	EQ	shift 97


	.	error


state 97:

	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ . exp 

	ID	shift 15
	INT	shift 14
	STRING	shift 13
	LPAREN	shift 12
	IF	shift 11
	LET	shift 10
	NIL	shift 9

	exp	goto 98
	arr_exp	goto 7
	rec_exp	goto 6
	let'	goto 5
	if'	goto 4
	funcall	goto 3
	bin_op	goto 2
	assign	goto 1

	.	error


state 98:

	bin_op : exp . EQ exp 
	bin_op : exp . MINUS exp 
	bin_op : exp . TIMES exp 
	fun_dec : FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ exp .  (reduce by rule 42)

	MINUS	shift 18
	TIMES	shift 17
	EQ	shift 16


	.	reduce by rule 42


state 99:


	EOF	accept


	.	error

116 of 352 action table entries left after compaction
185 goto table entries
