structure A = Absyn
val symbol = Symbol.symbol

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp of A.exp
        | arr_exp of A.exp
        | rec_exp of A.exp
        | field_exps of (A.symbol * A.exp * A.pos) list
        | field_exp of (A.symbol * A.exp * A.pos)
        | seq of (A.exp * A.pos) list
        | params of A.exp list
        | param of A.exp
        | let' of A.exp
        | if' of A.exp
        | while' of A.exp
        | funcall of A.exp
        | bin_op of A.exp
        | decs of A.dec list
        | dec of A.dec
        | type_dec of A.dec
        | var_dec of A.dec
        | fun_dec of A.dec
        | field_decs of A.field list
        | field_dec of A.field
        | assign of A.exp
        | program of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%nonassoc IF THEN ELSE WHILE DO FOR LET IN END OF FUNCTION ASSIGN
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE

%value ID               ("bogus")
%value INT              (1)
%value STRING           ("")

%%

program	: exp           (exp)

exp : NIL               (A.NilExp)
    | INT               (A.IntExp INT)
    | STRING            (A.StringExp (STRING, STRINGleft))
    | ID                (A.VarExp (A.SimpleVar (symbol ID, IDleft)))
    | LPAREN seq RPAREN (A.SeqExp seq)
    | let'              (let')
    | if'               (if')
    | while'            (while')
    | bin_op            (bin_op)
    | arr_exp           (arr_exp)
    | rec_exp           (rec_exp)
    | funcall           (funcall)
    | assign            (assign)

assign : ID ASSIGN exp (A.AssignExp {var = A.SimpleVar (symbol ID, IDleft),
                                     exp = exp,
                                     pos = IDleft})
       | ID DOT ID ASSIGN exp (A.AssignExp {var = A.FieldVar (A.SimpleVar (symbol ID1, ID1left),
                                                              symbol ID2,
                                                              ID1left),
                                            exp = exp,
                                            pos = ID1left})

arr_exp : ID LBRACK exp RBRACK OF exp (A.ArrayExp {typ = symbol ID,
                                                   size = exp,
                                                   init = exp,
                                                   pos = IDleft})

rec_exp : ID LBRACE field_exps RBRACE (A.RecordExp {fields = field_exps,
                                                    typ = symbol ID,
                                                    pos = IDleft})

field_exps : field_exp COMMA field_exps (field_exp :: field_exps)
           | field_exp                  (field_exp :: nil)

field_exp : ID EQ exp ((symbol ID, exp, IDleft))

funcall : ID LPAREN params RPAREN (A.CallExp {func = symbol ID,
                                              args = params,
                                              pos = IDleft})

params : exp COMMA params (exp :: params)
       | exp              (exp :: nil)

let' : LET decs IN seq END (A.LetExp {decs = decs,
                                      body = A.SeqExp seq,
                                      pos = LETleft})

if' : IF exp THEN exp ELSE exp (A.IfExp {test = exp1,
                                         then' = exp2,
                                         else' = SOME exp3,
                                         pos = IFleft})

while' : WHILE exp DO exp (A.WhileExp {test = exp1,
                                       body = exp2,
                                       pos = WHILEleft})

bin_op : exp EQ exp (A.OpExp {left = exp1,
                              oper = A.EqOp,
                              right = exp2,
                              pos = EQleft})
       | exp MINUS exp (A.OpExp {left = exp1,
                                 oper = A.MinusOp,
                                 right = exp2,
                                 pos = MINUSleft})
       | exp PLUS exp (A.OpExp {left = exp1,
                                oper = A.PlusOp,
                                right = exp2,
                                pos = PLUSleft})
       | exp TIMES exp (A.OpExp {left = exp1,
                                 oper = A.TimesOp,
                                 right = exp2,
                                 pos = TIMESleft})
       | exp GT exp (A.OpExp {left = exp1,
                              oper = A.GtOp,
                              right = exp2,
                              pos = GTleft})

seq : exp SEMICOLON seq   ((exp, expleft) :: seq)
    | exp                 ((exp, expleft) :: nil)

decs : dec decs       (dec :: decs)
     | dec            (dec :: nil)

dec : type_dec (type_dec)
    | var_dec  (var_dec)
    | fun_dec  (fun_dec)

var_dec : VAR ID COLON ID ASSIGN exp (A.VarDec {name = symbol ID1,
                                                escape = ref false,
                                                typ = SOME (symbol ID2, ID2left),
                                                init = exp,
                                                pos = VARleft
                                     })
        | VAR ID ASSIGN exp (A.VarDec {name = symbol ID1,
                                       escape = ref false,
                                       typ = NONE,
                                       init = exp,
                                       pos = VARleft
                            })

type_dec : TYPE ID EQ ID (A.TypeDec [{name = symbol ID1,
                                     ty = A.NameTy (Symbol.symbol ID2, ID2left),
                                     pos = TYPEleft}])
         | TYPE ID EQ ARRAY OF ID (A.TypeDec [{name = symbol ID1,
                                               ty = A.ArrayTy (symbol ID2, ARRAYleft),
                                               pos = TYPEleft}])
         | TYPE ID EQ LBRACE field_decs RBRACE (A.TypeDec [{name = symbol ID1,
                                                            ty = A.RecordTy field_decs,
                                                            pos = TYPEleft}])

field_decs : field_dec COMMA field_decs (field_dec :: field_decs)
           | field_dec                  (field_dec :: nil)

field_dec : ID COLON ID ({name = symbol ID1,
                          escape = ref false,
                          typ = symbol ID2,
                          pos = ID1left})

fun_dec : FUNCTION ID LPAREN field_decs RPAREN EQ exp (A.FunctionDec [{name = symbol ID,
                                                                       params = field_decs,
                                                                       result = NONE,
                                                                       body = exp,
                                                                       pos = FUNCTIONleft}])
        | FUNCTION ID LPAREN field_decs RPAREN COLON ID EQ exp (A.FunctionDec [{name = symbol ID1,
                                                                                params = field_decs,
                                                                                result = SOME (symbol ID2, ID2left),
                                                                                body = exp,
                                                                                pos = FUNCTIONleft}])
